# Manuel dâ€™utilisation et Manifeste de SENTRA_CORE_MEM v0.2

**Version : v0.2 (2025-05-25)**  
**Branches Git :**  
- **dev** : dÃ©veloppement automatique quotidien  
- **main** : version stable, fusion manuelle  

---

## Table des matiÃ¨res

1. [Vue dâ€™ensemble](#vue-densemble)  
2. [Arborescence du projet](#arborescence-du-projet)  
3. [Description des fichiers et dossiers](#description-des-fichiers-et-dossiers)  
4. [Actions possibles & workflows](#actions-possibles--workflows)  
5. [Notice dâ€™utilisation pas-Ã -pas](#notice-dutilisation-pas-Ã -pas)  
6. [Bonnes pratiques & conseils](#bonnes-pratiques--conseils)  

---

## Vue dâ€™ensemble

SENTRA_CORE_MEM est une plateforme de workflow IA lÃ©gÃ¨re, offrant :

- **Gestion de mÃ©moire** compressÃ©e et glyphique  
- **Orchestration** de requÃªtes (intention â†’ agents)  
- **Archivage** et **consultation** via Notion  
- **GÃ©nÃ©ration** de rapports Markdown horodatÃ©s  
- **Cycle Git** automatique vers `dev` + fusion manuelle vers `main`  

Chaque composant sâ€™auto-organise en dossiers dÃ©diÃ©s pour garder un dÃ©pÃ´t propre et Ã©volutif.

---

## Arborescence du projet

SENTRA_CORE_MEM_v0.1/
â”œâ”€ docs/
â”‚ â”œâ”€ SENTRA_OATH.md
â”‚ â””â”€ glyph_rules.txt
â”œâ”€ logs/
â”‚ â””â”€ execution_log.txt
â”œâ”€ memory/
â”‚ â””â”€ sentra_memory.json
â”œâ”€ prompts/
â”œâ”€ reports/
â”‚ â””â”€ YYYY/MM/
â”œâ”€ scripts/
â”‚ â””â”€ memory_manager.py
â”œâ”€ sentra/
â”‚ â”œâ”€ agents/
â”‚ â””â”€ orchestrator.py
â”œâ”€ .env
â”œâ”€ sentra_config.py
â”œâ”€ notion_config.py
â”œâ”€ main.py
â”œâ”€ main_agents.py
â”œâ”€ markdown_generator.py
â”œâ”€ sentra_cycle.bat
â”œâ”€ merge_to_main.bat
â”œâ”€ README.md
â”œâ”€ CHANGELOG.md
â””â”€ requirements.txt



---

## Description des fichiers et dossiers

- **docs/**  
  - `SENTRA_OATH.md` : code de conduite IA  
  - `glyph_rules.txt` : rÃ¨gles de compression glyphique  
- **logs/**  
  - `execution_log.txt` : journal append-only des appels IA  
- **memory/**  
  - `sentra_memory.json` : historique compressÃ© des Ã©changes  
- **prompts/** : prompts systÃ¨mes  
- **reports/** : rapports Markdown gÃ©nÃ©rÃ©s (annÃ©e/mois)  
- **scripts/memory_manager.py** : API interne mÃ©moire  
- **sentra/orchestrator.py** : moteur dâ€™intention â†’ agent â†’ log â†’ mÃ©moire  
- **markdown_generator.py** : crÃ©ation de rapports `.md`  
- **sentra/agents/** : agents spÃ©cialisÃ©s (Notion, rÃ©seauâ€¦)  
- **notion_config.py** : clÃ© & ID Notion  
- **sentra_config.py** : options globales IA  
- **sentra_cycle.bat** : cycle complet â†’ push `dev`  
- **merge_to_main.bat** : merge `dev` â†’ `main`  
- **CHANGELOG.md** : historique de versions  
- **README.md** : doc dâ€™introduction  
- **requirements.txt** : dÃ©pendances Python  

---

## Actions possibles & workflows

| Action                  | Commande / Script                                 | RÃ©sultat                            |
|-------------------------|---------------------------------------------------|-------------------------------------|
| Orchestrer IA           | `python -m sentra.orchestrator ["message"]`       | log + mÃ©moire + rÃ©ponse console     |
| Archivage Notion        | `python sentra/agents/agent_notion.py`            | page ajoutÃ©e dans Notion            |
| Lecture Notion          | `python sentra/agents/notion_reader.py`           | derniers logs affichÃ©s              |
| GÃ©nÃ©rer rapport MD      | `python markdown_generator.py "sujet"`            | `.md` crÃ©Ã© dans `/reports/`         |
| Cycle complet           | `double-clic sentra_cycle.bat`                    | Ã©tapes 1â†’5 + push `dev`             |
| Fusion vers prod        | `double-clic merge_to_main.bat`                   | merge `dev`â†’`main` + push `main`    |
| Nettoyage local         | `clean_local.bat` (supprime caches & tests)       | dÃ©pÃ´t Ã©purÃ©                         |

---

## Notice dâ€™utilisation pas-Ã -pas

1. **Cloner le dÃ©pÃ´t**  
   ```bash
   git clone https://github.com/NexorAgent/SENTRA_CORE_MEM.git
   cd SENTRA_CORE_MEM_v0.1

2.Configurer lâ€™environnement

   .Remplir .env, notion_config.py, sentra_config.py.

3.Installer les dÃ©pendances

pip install -r requirements.txt

 4.Lancer un cycle IA

    .Double-clic sur sentra_cycle.bat

5.Consulter le rapport

    .Ouvre reports/YYYY/MM/*.md

6.Fusionner vers main

    .Double-clic sur merge_to_main.bat

7.Mettre Ã  jour CHANGELOG.md

    .Ajouter section [vX.Y] â€“ date

Bonnes pratiques & conseils
Pousser automatiquement sur dev, fusionner manuellement sur main.

Ne pas Ã©craser execution_log.txt (mode append).

Conserver anciens rapports pour audit.

Relire SENTRA_OATH.md pour rester alignÃ©.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ†• Traduction glyphique (Auto Translator)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Depuis la v0.4, SENTRA intÃ¨gre un module de compression glyphique automatique.

â†’ Objectif : traduire tout texte mÃ©tier en glyphes intelligents, puis le compresser
via zlib + base85. Les gains sont de lâ€™ordre de -70% sur le stockage et -80% sur
lâ€™empreinte token envoyÃ©e Ã  OpenAI.

â†’ Emplacement du module : `sentra/agents/auto_translator.py`

â†’ Lancement (manuel ou scriptÃ©) :
â€¢ CMD :    `python -m sentra.agents.auto_translator`
â€¢ BAT :    `run_auto_translator.bat`
â€¢ Python : `from sentra.agents.auto_translator import to_glyph, from_glyph`

â†’ Dictionnaire de glyphes enrichi automatiquement :
StockÃ© dans `memory/glyph_dict.json` â€” chaque mot inconnu est compressÃ© et
mÃ©morisÃ© automatiquement. Plus le systÃ¨me tourne, plus il est efficient.

â†’ Commandes internes disponibles :
- `list_glyphs()` â†’ affiche le dico actuel
- `reload_dict()` â†’ recharge le dico sans redÃ©marrage
- `save_memory(key, text)` â†’ enregistre un contenu compressÃ© dans la mÃ©moire

ExÃ©cution automatique du traducteur glyphique
Butâ€¯: gÃ©nÃ©rer ou mettre Ã  jour tous les glyphes/abrÃ©viations Ã  partir des logs.

ProcÃ©dureâ€¯:

DÃ©marrer LM Studio (API locale activÃ©e, modÃ¨le chargÃ©)

Placer les fichiers .txt Ã  traduire dans le dossier /logs/

Double-cliquer sur run_auto_translator.bat

VÃ©rifier la mise Ã  jour de /memory/glyph_dict.json

Code du batch
bat
Copier
Modifier
@echo off
python -c "from sentra.orchestrator import dispatcher; import glob; [print(dispatcher(f'glyph traduction {file}')) for file in glob.glob('logs\\*.txt')]"
pause
RÃ©sultat attendu
Consoleâ€¯: liste des glyphes gÃ©nÃ©rÃ©s

memory/glyph_dict.json mis Ã  jour