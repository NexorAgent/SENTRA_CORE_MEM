version: "3.9"

services:
  postgres:
    image: ankane/pgvector:latest
    container_name: sentra_postgres
    environment:
      POSTGRES_DB: sentra_core
      POSTGRES_USER: sentra
      POSTGRES_PASSWORD: sentra
      PGTZ: Europe/Paris
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentra -d sentra_core"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"

  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    environment:
      DATABASE_URL: postgresql+psycopg://sentra:sentra@postgres:5432/sentra_core
      SENTRA_API_BASE: http://api:8000
      PYTHONPATH: /app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./scripts:/app/scripts
      - ./memory:/app/memory
      - ./projects:/app/projects
      - ./logs:/app/logs
      - ./.gemini:/root/.gemini
      - /sandbox:/sandbox
    ports:
      - "8000:8000"
    dns:
      - 213.186.33.99
      - 8.8.8.8
      - 1.1.1.1

  vector-worker:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    command: python -m app.workers.vector_ingestion
    environment:
      DATABASE_URL: postgresql+psycopg://sentra:sentra@postgres:5432/sentra_core
      PYTHONPATH: /app
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - workers

  discord:
    build:
      context: .
      dockerfile: docker/discord.Dockerfile
    env_file:
      - .env
    depends_on:
      api:
        condition: service_started
    dns:
      - 213.186.33.99
      - 8.8.8.8
      - 1.1.1.1

  orchestrator:
    build:
      context: .
      dockerfile: docker/orchestrator.Dockerfile
    env_file:
      - .env
    volumes:
      - ./memory:/app/memory
      - ./projects:/app/projects
    depends_on:
      api:
        condition: service_started
    dns:
      - 213.186.33.99
      - 8.8.8.8
      - 1.1.1.1

  n8n:
    build:
      context: .
      dockerfile: Dockerfile.n8nzip
    restart: always
    ports:
      - "5679:5678"
    environment:
      - N8N_SECURE_COOKIE=false
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=sentra
      - N8N_BASIC_AUTH_PASSWORD=memcore
      - N8N_HOST=n8n.sentracoremem.ovh
      - WEBHOOK_URL=https://n8n.sentracoremem.ovh/
      - N8N_PORT=5678
      - GENERIC_TIMEZONE=Europe/Paris
    volumes:
      - ./n8n/n8n_data:/home/node/.n8n
      - /home/debian/SENTRA_CORE_MEM:/home/debian/SENTRA_CORE_MEM
      - /home/debian/projects/sentra_core_sandbox:/home/debian/projects/sentra_core_sandbox
    dns:
      - 213.186.33.99
      - 8.8.8.8
      - 1.1.1.1

  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: sentra_filebrowser
    volumes:
      - ./:/srv
      - ./filebrowser_config:/config
    entrypoint: filebrowser
    command: >
      --database /config/filebrowser.db
      --config /config/filebrowser.json
      --address 0.0.0.0
      --port 80
    ports:
      - "8081:80"
    restart: unless-stopped

  mcp:
    build:
      context: .
      dockerfile: docker/mcp.Dockerfile
    depends_on:
      api:
        condition: service_started
    environment:
      SENTRA_API_BASE: ${SENTRA_API_BASE:-http://api:8000}
      FS_ROOTS_ALLOW: ${FS_ROOTS_ALLOW:-/projects,/reports,/students,/memory}
      FS_NAMING: ${FS_NAMING:-{YYYY}{MM}{DD}_{agent}_{topic}__{slug}.md}
    volumes: []
    # volumes:
    # - type: bind
    #   source: ${SSH_AUTH_SOCK:-/tmp/ssh-agent.sock}
    #   target: /ssh-agent
    #   read_only: true
    ports:
      - "8400:8400"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8400/healthz"]
      interval: 15s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
